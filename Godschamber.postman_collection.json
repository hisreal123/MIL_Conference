{
	"info": {
		"_postman_id": "f4b9fa8a-5492-49e7-9e0a-f94b21a92515",
		"name": "Godschamber",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33193301",
		"_collection_link": "https://gc-software-team.postman.co/workspace/My-Workspace~9723cc4d-c0c2-414e-8c2a-c9c522f78b99/collection/33193301-f4b9fa8a-5492-49e7-9e0a-f94b21a92515?action=share&source=collection_link&creator=33193301"
	},
	"item": [
		{
			"name": "Expression",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Glory House 2\",\n    \"logo\": \"http://www.godschamber.org.ng/assets/images/gclogo-235x168.png\",\n    \"address\": \"God's chamber Church, Ajayi Rd, Ojodu 101232, Ojodu, Lagos\",\n    \"longitude\": 6.6374416,\n    \"latitude\": 3.3404592,\n    \"backgroundColor\": \"#ff0000\",\n    \"backgroundImage\": \"http://www.godschamber.org.ng/assets/images/gclogo-235x168.png\",\n    \"instagramUrl\": \"https://www.instagram.com/godschamber\",\n    \"twitterUrl\": \"https://twitter.com/GodsChamberMin\",\n    \"facebookUrl\": \"https://www.facebook.com/GodsChamberMinistries\",\n    \"linkedinUrl\": \"https://www.linkedin.com/company/godschamber\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/expression",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0, \"StatusCode should not be zero\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is in an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Glory House\",\n    \"address\": \"God's chamber Church, Ajayi Rd, Ojodu 101232, Ojodu, Lagos\",\n    \"longitude\": 6.6374416,\n    \"latitude\": 3.3404592,\n    \"backgroundColor\": \"#ff0000\",\n    \"backgroundImage\": \"http://www.godschamber.org.ng/assets/images/gclogo-235x168.png\",\n    \"instagramUrl\": \"https://www.instagram.com/godschamber\",\n    \"twitterUrl\": \"https://twitter.com/GodsChamberMin\",\n    \"facebookUrl\": \"https://www.facebook.com/GodsChamberMinistries\",\n    \"linkedinUrl\": \"https://www.linkedin.com/company/godschamber\",\n    \"rssFeedLink\": \"https://www.nytimes.com/rss\",\n    \"youtubeChannelId\": \"@codebymoonlight\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/expression/64ce44d4af3580b8cebded79",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression",
								"64ce44d4af3580b8cebded79"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('message');",
									"  pm.expect(responseData).to.have.property('error');",
									"  pm.expect(responseData).to.have.property('statusCode');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number', \"StatusCode should be a number\");",
									"  pm.expect(responseData.statusCode).to.be.at.least(0, \"StatusCode should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/expression/642b45862d2dcee592c522fb",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression",
								"642b45862d2dcee592c522fb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(data) {",
									"    pm.expect(data.name).to.be.a('string').and.to.have.length.of.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(data) {",
									"        pm.expect(data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/expression",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Live Stream",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"  pm.expect(responseData).to.have.property('statusCode').that.is.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link\": \"https://www.youtube.com/watch?v=8n2LlrMH0JI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/expression/64311bf47bf95d71bece87e3/live-stream",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression",
								"64311bf47bf95d71bece87e3",
								"live-stream"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Live Stream",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.createdBy).to.exist;",
									"    pm.expect(responseData.link).to.exist;",
									"    pm.expect(responseData.expressionId).to.exist;",
									"    pm.expect(responseData.createdAt).to.exist;",
									"    pm.expect(responseData.updatedAt).to.exist;",
									"    pm.expect(responseData.updatedBy).to.exist;",
									"    pm.expect(responseData.id).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Test that createdBy is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.createdBy).to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Test that link is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.link).to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/expression/64311bf47bf95d71bece87e3/live-stream",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"expression",
								"64311bf47bf95d71bece87e3",
								"live-stream"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bible Study",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bibleId\": \"#Genesis\",\n    \"chapterId\": \"http://www.godschamber.org.ng/assets/images/gclogo-235x168.png\",\n    \"bookId\": \"https://www.instagram.com/godschamber\",\n    \"date\": \"2023-05-21\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bible-study",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bible-study"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a positive integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bibleId\": \"Genesis\",\n    \"chapterId\":\"2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bible-study/649cce434589fea9ca02c834",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bible-study",
								"649cce434589fea9ca02c834"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'message' field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'error' field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the statusCode field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/bible-study/642b45862d2dcee592c522fb",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bible-study",
								"642b45862d2dcee592c522fb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response body has the required fields - data and meta\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"The 'data' field is an array and is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Meta field has the expected keys\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.meta).to.have.all.keys('total', 'page', 'lastPage', 'hasNextPage', 'hasPreviousPage', 'limit');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/bible-study",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bible-study"
							],
							"query": [
								{
									"key": "minDate",
									"value": null,
									"disabled": true
								},
								{
									"key": "maxDate",
									"value": null,
									"disabled": true
								},
								{
									"key": "minCreatedAt",
									"value": null,
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Home Cells",
			"item": [
				{
					"name": "Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/home-cell/seed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home-cell",
								"seed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n        \"name\": \"test address name\",\r\n        \"address\": \"test address street\",\r\n        \"leaderId\": \"6433d06f442ae699dd078e9c\",\r\n        \"expressionId\": \"6431f1b45cbaba1f893eb0f3\",\r\n        \"stateId\": \"62768d298fa8a5272c18e883\",\r\n        \"lga\": \"Ajeromi-Ifelodun\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/home-cell",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home-cell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"LeaderId fullName is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.leaderId.fullName).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"ExpressionId name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.expressionId.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StateId stateId is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.stateId.stateId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/home-cell/6469eefc978f7ecba8795ea7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home-cell",
								"6469eefc978f7ecba8795ea7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test address name\",\r\n    \"address\": \"test address street\",\r\n    \"leaderId\": \"6433d06f442ae699dd078e9c\",\r\n    \"expressionId\": \"6431f1b45cbaba1f893eb0f3\",\r\n    \"stateId\": \"62768d298fa8a5272c18e882\",\r\n    \"lga\": \"Ifelodun\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/home-cell/6469eefc978f7ecba8795ea7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home-cell",
								"6469eefc978f7ecba8795ea7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - data and meta\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Data is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Meta contains the expected fields\", function () {",
									"  const responseData = pm.response.json();",
									"  const meta = responseData.meta;",
									"",
									"  pm.expect(meta).to.be.an('object');",
									"  pm.expect(meta).to.have.all.keys('total', 'page', 'lastPage', 'hasNextPage', 'hasPreviousPage', 'limit');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/home-cell?name=test address name&sort=createdAt,desc&limit=20&page=1&address=test address street&leaderId=6433d06f442ae699dd078e9c&expressionId=6431f1b45cbaba1f893eb0f3&stateId=62768d298fa8a5272c18e883&lga=Ajeromi-Ifelodun",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home-cell"
							],
							"query": [
								{
									"key": "name",
									"value": "test address name"
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								},
								{
									"key": "address",
									"value": "test address street"
								},
								{
									"key": "leaderId",
									"value": "6433d06f442ae699dd078e9c"
								},
								{
									"key": "expressionId",
									"value": "6431f1b45cbaba1f893eb0f3"
								},
								{
									"key": "stateId",
									"value": "62768d298fa8a5272c18e883"
								},
								{
									"key": "lga",
									"value": "Ajeromi-Ifelodun"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Baby Dedication",
			"item": [
				{
					"name": "Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message field is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"StatusCode field is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/baby-dedication/seed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"baby-dedication",
								"seed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.an('array');",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('statusCode').that.is.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is an array and is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'property' field inside the 'message' array is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.an('array').that.is.not.empty;",
									"    responseData.message.forEach(function (msg) {",
									"        pm.expect(msg.property).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'children' field inside the 'message' array is an array and is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.an('array');",
									"    responseData.message.forEach(function (message) {",
									"        pm.expect(message.children).to.be.an('array').that.is.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"parentsName\": \"Hope Kuhlman\",\r\n        \"parentsAddress\": \"292 Reilly Viaduct\",\r\n        \"contactNo\": \"+2346621606759\",\r\n        \"sexOfBaby\": \"MALE\",\r\n        \"babyDOB\": \"2022-12-23T13:25:23.821Z\",\r\n        \"churchMemberDuration\": \"Wed Dec 14 2022 19:47:27 GMT+0100 (West Africa Standard Time)\",\r\n        \"homeCellId\": \"64ce450faf3580b8cebded98\",\r\n        \"hasDoneGCSchool\": false,\r\n        \"GCSchoolLevel\": \"200\",\r\n        \"namingDateAndTime\": \"2024-03-16T17:16:40.217Z\",\r\n        \"likelyBabyDedicationDate\": \"2023-10-30T01:30:24.879Z\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/baby-dedication",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"baby-dedication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.error).to.exist;",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/baby-dedication/64ce451daf3580b8cebdeda1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"baby-dedication",
								"64ce451daf3580b8cebdeda1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"parentsName\": \"Hope Kuhlman\",\r\n        \"parentsAddress\": \"292 Reilly Viaduct\",\r\n        \"contactNo\": \"2347063951274\",\r\n        \"sexOfBaby\": \"MALE\",\r\n        \"babyDOB\": \"2022-12-23T13:25:23.821Z\",\r\n        \"churchMemberDuration\": \"Wed Dec 14 2022 19:47:27 GMT+0100 (West Africa Standard Time)\",\r\n        \"homeCellId\": \"64ce450faf3580b8cebded98\",\r\n        \"hasDoneGCSchool\": false,\r\n        \"GCSchoolLevel\": 300,\r\n        \"namingDateAndTime\": \"2024-03-16T17:16:40.217Z\",\r\n        \"likelyBabyDedicationDate\": \"2023-10-30T01:30:24.879Z\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/baby-dedication/64ce451daf3580b8cebdeda1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"baby-dedication",
								"64ce451daf3580b8cebdeda1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/baby-dedication?name=test address name&sort=createdAt,desc&limit=20&page=1&address=test address street&leaderId=6433d06f442ae699dd078e9c&expressionId=6431f1b45cbaba1f893eb0f3&stateId=62768d298fa8a5272c18e883&lga=Ajeromi-Ifelodun",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"baby-dedication"
							],
							"query": [
								{
									"key": "name",
									"value": "test address name"
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								},
								{
									"key": "address",
									"value": "test address street"
								},
								{
									"key": "leaderId",
									"value": "6433d06f442ae699dd078e9c"
								},
								{
									"key": "expressionId",
									"value": "6431f1b45cbaba1f893eb0f3"
								},
								{
									"key": "stateId",
									"value": "62768d298fa8a5272c18e883"
								},
								{
									"key": "lga",
									"value": "Ajeromi-Ifelodun"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Testimonies",
			"item": [
				{
					"name": "Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/testimony/seed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony",
								"seed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test create testimony 2\",\r\n    \"body\": \"God is good, God is everything to me\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/testimony",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/testimony/6465fc104fc26224cb9f6107",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony",
								"6465fc104fc26224cb9f6107"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test create testimony\",\r\n    \"body\": \"God is good, God is everything to me\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/testimony/64ae024dcd1378fa76211b8b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony",
								"64ae024dcd1378fa76211b8b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/testimony/64ae024dcd1378fa76211b8b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony",
								"64ae024dcd1378fa76211b8b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'meta' object contains the expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    const meta = responseData.meta;",
									"    ",
									"    pm.expect(meta).to.be.an('object');",
									"    pm.expect(meta.total).to.exist;",
									"    pm.expect(meta.page).to.exist;",
									"    pm.expect(meta.lastPage).to.exist;",
									"    pm.expect(meta.hasNextPage).to.exist;",
									"    pm.expect(meta.hasPreviousPage).to.exist;",
									"    pm.expect(meta.limit).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/testimony?sort=createdAt,desc&limit=20&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"testimony"
							],
							"query": [
								{
									"key": "title",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Weekly Update",
			"item": [
				{
					"name": "Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/weekly-update/seed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update",
								"seed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Tes announcments3\",\r\n    \"expressionId\": \"64311bf47bf95d71bece87e3\",\r\n    \"startDate\": \"2023-05-21\",\r\n    \"endDate\": \"2023-05-26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/weekly-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that createdBy is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate that body is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/weekly-update/646a6e275e4328b996121da1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update",
								"646a6e275e4328b996121da1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Tes announcment updated\",\r\n    \"expressionId\": \"64311bf47bf95d71bece87e3\",\r\n    \"startDate\": \"2023-05-21\",\r\n    \"endDate\": \"2023-05-26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/weekly-update/646a6e275e4328b996121da1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update",
								"646a6e275e4328b996121da1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - data and meta\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData).to.have.property('meta');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.data.length).to.be.at.least(1, \"The 'data' array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence of the 'meta' object in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.meta).to.exist;",
									"});",
									"",
									"pm.test(\"Validate that the 'createdBy' field in each element of the 'data' array is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(element) {",
									"        pm.expect(element.createdBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/weekly-update?limit=20&page=1&sort=createdAt,desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update"
							],
							"query": [
								{
									"key": "body",
									"value": "Quia reprehenderit tempora",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								},
								{
									"key": "expressionId",
									"value": "64311bf47bf95d71bece87e3",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains the 'data' field\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Data field is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Meta field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.meta).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/weekly-update/all/active?limit=20&page=1&sort=createdAt,desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"weekly-update",
								"all",
								"active"
							],
							"query": [
								{
									"key": "body",
									"value": "Quia reprehenderit tempora",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								},
								{
									"key": "expressionId",
									"value": "64311bf47bf95d71bece87e3",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Man in the Mirror\",\r\n    \"description\": \"Full description\",\r\n    \"eventDates\": [\"2024-06-31T20:00:00\"],\r\n    \"expressionId\": \"64ce44d4af3580b8cebded79\",\r\n    \"image\": \"http://www.godschamber.org.ng/assets/images/gclogo-235x168.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullName\": \"Kelvin\",\r\n    \"eventId\": \"65e6b87e2d87c12610ffc23c\",\r\n    \"gender\": \"MALE\",\r\n    \"email\": \"kelvinjune2@gmail.com\",\r\n    \"mobileNumber\": \"07063444936\",\r\n    \"expressions\": [\"64ce44d4af3580b8cebded79\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/65e6b87e2d87c12610ffc23c/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"65e6b87e2d87c12610ffc23c",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-in attendee to event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"MIM6203\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/check-in",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"check-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/65e6b87e2d87c12610ffc23c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"65e6b87e2d87c12610ffc23c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"canRsvp\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/65e6b87e2d87c12610ffc23c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"65e6b87e2d87c12610ffc23c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate createdBy is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(event) {",
									"        pm.expect(event.createdBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?sort=createdAt,desc&limit=20&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "title",
									"value": "Man in th",
									"disabled": true
								},
								{
									"key": "expressionId",
									"value": "6460b558649123487c686351",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "createdAt,desc"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "minCreatedAt",
									"value": "2023-06-30",
									"disabled": true
								},
								{
									"key": "maxCreatedAt",
									"value": "2023-06-31",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Lookup",
			"item": [
				{
					"name": "Get all states",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/datalookup/states",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"datalookup",
								"states"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get state by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/datalookup/state/62768d298fa8a5272c18e990",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"datalookup",
								"state",
								"62768d298fa8a5272c18e990"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LGAs in a state",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/datalookup/state/lgas/kwara",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"datalookup",
								"state",
								"lgas",
								"kwara"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "Send Registration OTP",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/otp/send/email/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otp",
										"send",
										"email",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Registration OTP",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\",\n    \"code\": \"361379\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/otp/verify/email/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otp",
										"verify",
										"email",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.code === 201){",
											"    pm.environment.set('bearerToken', pm.response.json().payload.accessToken);",
											"    pm.environment.set('refreshToken', pm.response.json().payload.refreshToken);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"kelvinjune2@gmail.com\",\r\n    \"fullName\": \"Kelvin Omozokpia\",\r\n    \"mobileNumber\": 2347063444936,\r\n    \"password\": \"Chelsea7\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change Password",
					"item": [
						{
							"name": "Send Change Password OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - message\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/otp/send/email/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otp",
										"send",
										"email",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Change Password OTP",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\",\n    \"code\": \"210880\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/otp/verify/email/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otp",
										"verify",
										"email",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\",\n    \"newPassword\": \"123456\",\n    \"confirmPassword\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"oldPassword\": \"123456\",\n    \"newPassword\": \"12345678\",\n    \"confirmPassword\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/update-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"update-password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Role Management",
					"item": [
						{
							"name": "Get API Routes",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\": \"ADMINISTRATOR\",\n   \"description\": \"This is the full administrator privilege\",\n   \"apiRoutes\": [\n       {\n           \"path\": \"/expression/:id2\",\n           \"method\": \"get\"\n       }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role/api-routes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role",
										"api-routes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Role",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"ADMINISTRATOR\",\n    \"description\": \"This is the administrator role\",\n    \"apiRoutes\": [\n        {\n            \"path\": \"/auth/role/api-routes\",\n            \"method\": \"get\"\n        },\n        {\n            \"path\": \"/auth/role\",\n            \"method\": \"post\"\n        },\n        {\n            \"path\": \"/auth/role/:id\",\n            \"method\": \"patch\"\n        },\n        {\n            \"path\": \"/auth/role/user/:id/assign\",\n            \"method\": \"patch\"\n        },\n        {\n            \"path\": \"/auth/role/user/:id/remove\",\n            \"method\": \"patch\"\n        },\n        {\n            \"path\": \"/auth/role\",\n            \"method\": \"get\"\n        },\n        {\n            \"path\": \"/auth/role/:id\",\n            \"method\": \"get\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is 'application/json'\", function() {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.statusCode).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"StatusCode is a non-zero integer\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.statusCode).to.be.a('number');",
											"  pm.expect(responseData.statusCode).to.not.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"ADMINISTRATOR\",\n    \"description\": \"This is the full administrator privilege and more\",\n    \"apiRoutes\": [\n    {\n        \"path\": \"/\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/otp/send/email/registration\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/otp/verify/email/registration\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/otp/send/email/change-password\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/otp/verify/email/change-password\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/expression\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/expression/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/expression\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/expression/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/expression/:id/live-stream\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/expression/:id/live-stream\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/auth/register\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/auth/refresh\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/auth/change-password\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/logout\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/auth/login\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/auth/profile\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/auth/profile\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/update-password\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/role/api-routes\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/auth/role\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/auth/role/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/role/user/:id/assign\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/role/user/:id/remove\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/auth/role\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/auth/role/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/event\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/event/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/event/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/event\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/testimony\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/testimony/seed\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/testimony/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/testimony/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/testimony\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/home-cell\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/home-cell/seed\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/home-cell/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/home-cell/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/home-cell\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/datalookup/states\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/datalookup/state/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/datalookup/state/lgas/:stateid\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/weekly-update\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/weekly-update/seed\",\n        \"method\": \"post\"\n    },\n    {\n        \"path\": \"/weekly-update/:id\",\n        \"method\": \"patch\"\n    },\n    {\n        \"path\": \"/weekly-update/:id\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/weekly-update\",\n        \"method\": \"get\"\n    },\n    {\n        \"path\": \"/weekly-update/all/active\",\n        \"method\": \"get\"\n    }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role/649197e0644d9daea598ed79",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role",
										"649197e0644d9daea598ed79"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Roles",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role By ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role/64918f05f37863d6bf2d007e",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role",
										"64918f05f37863d6bf2d007e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Roles to User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"StatusCode is a positive integer\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.statusCode).to.be.above(0);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"649188b543f0260de8a4fc1e\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role/user/6425d323af320cb7ef138874/assign",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role",
										"user",
										"6425d323af320cb7ef138874",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Roles From User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'statusCode' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.statusCode).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that statusCode field is a non-zero value\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.statusCode).to.exist;",
											"  pm.expect(responseData.statusCode).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"649188b543f0260de8a4fc1e\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/role/user/6425d323af320cb7ef138874/remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"role",
										"user",
										"6425d323af320cb7ef138874",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 201){",
									"    console.log(pm.response.json());",
									"",
									"    pm.environment.set('bearerToken', pm.response.json().payload.accessToken);",
									"    pm.environment.set('refreshToken', pm.response.json().payload.refreshToken);",
									"}",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('message');",
									"  pm.expect(responseData).to.have.property('error');",
									"  pm.expect(responseData).to.have.property('statusCode');",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"kelvinjune2@gmail.com\",\n    \"password\": \"Chelsea7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero number\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.be.a('number').and.to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that statusCode is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"expressions\": [\"64311bf47bf95d71bece87e3\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 201){",
									"    pm.environment.set('bearerToken', pm.response.json().data.payload.accessToken);",
									"    pm.environment.set('refreshToken', pm.response.json().data.payload.refreshToken);",
									"}",
									"pm.test(\"Response status code is 422\", function () {",
									"  pm.expect(pm.response.code).to.equal(422);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		}
	]
}